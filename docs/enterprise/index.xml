<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Enterprise Features on Sakuli E2E Testing and Monitoring</title>
    <link>https://sakuli.io/docs/enterprise/</link>
    <description>Recent content in Enterprise Features on Sakuli E2E Testing and Monitoring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://sakuli.io/docs/enterprise/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Icinga2 Forwarder</title>
      <link>https://sakuli.io/docs/enterprise/icinga2-forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/enterprise/icinga2-forwarder/</guid>
      <description>Add the forwarder to your project with:
npm i @sakuli/forwarder-icinga2 To register the forwarder into your project you have to edit the package.json file and add the preset to the Sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-icinga2&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.  Enable the Icinga2 API All steps required to enable the Icinga2 API are described in the REST API documentation.</description>
    </item>
    
    <item>
      <title>Check_MK Forwarder</title>
      <link>https://sakuli.io/docs/enterprise/check_mk-forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/enterprise/check_mk-forwarder/</guid>
      <description>Add the forwarder to your project with:
npm i @sakuli/forwarder-checkmk To register the forwarder into your project you have to edit the package.json file and add the preset to the Sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-checkmk&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.  Sakuli Client Configuration It is assumed that the client is already monitored by Check_MK and that an agent is installed and running on it.</description>
    </item>
    
    <item>
      <title>OMD / Gearman Forwarder</title>
      <link>https://sakuli.io/docs/enterprise/omd-forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/enterprise/omd-forwarder/</guid>
      <description>Install the forwarder to your project with:
npm i @sakuli/forwarder-gearman To register the forwarder into your project you have to edit the package.json file and add the preset to the Sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-gearman&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.  Configure OMD Sakuli transmits performance data to a Gearman result queue rather than to OMD directly.</description>
    </item>
    
    <item>
      <title>E2E Test Container</title>
      <link>https://sakuli.io/docs/enterprise/test-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/enterprise/test-container/</guid>
      <description>Once you obtained a Sakuli Enterprise license your docker-user will be granted access to the private Sakuli test container image. This image is ready to go and ships with already installed:
 Sakuli Icinga2 / Check_MK / OMD Forwarder VNC / noVNC Chrome / Firefox (incl. webdriver)  1 Obtaining the Image The registered docker-hub user will then be able to pull the private image:
docker pull taconsol/sakuli:&amp;lt;IMAGE_TAG&amp;gt; Sakuli test containers do not provide a latest tag.</description>
    </item>
    
    <item>
      <title>S2I Image</title>
      <link>https://sakuli.io/docs/enterprise/s2i-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/enterprise/s2i-image/</guid>
      <description>Sakuli enterprise comes with ready-to-use source to image (S2I) containers for RedHat OpenShift. Using this builder container, it is easily possible to create deployable Sakuli images shipped with a test suite straight from your code repository.
Setup To setup the source to image builds on your OpenShift cluster, it is required to import the images from taconsol/sakuli-s2i. To achieve this, you have to create a docker-registry secret with your &amp;lt;docker-username&amp;gt; and &amp;lt;docker-password&amp;gt; and link it to your builder service account to authenticate on docker.</description>
    </item>
    
  </channel>
</rss>