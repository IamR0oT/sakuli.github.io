<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Enterprise Features on Sakuli E2E Testing and Monitoring</title>
    <link>https://sakuli.io/docs/200_enterprise/</link>
    <description>Recent content in Enterprise Features on Sakuli E2E Testing and Monitoring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://sakuli.io/docs/200_enterprise/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Icinga2 Forwarder</title>
      <link>https://sakuli.io/docs/200_enterprise/icinga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/200_enterprise/icinga/</guid>
      <description>Add the forwarder to your project with:
SAKULI_LICENSE_KEY=&amp;lt;PERSONAL_NPM_ACCESS_TOKEN&amp;gt; npm i @sakuli/forwarder-icinga2 To register the forwarder in your project you have edit the package.json file and add the preset to the sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-icinga2&amp;#34; ] } } Enable the Icinga2 API The steps to enable the Icinga2 API are described in the REST API documentation.
Create a Icings2 service Create a check_command, which will be executed only if Icinga did not receive a Sakuli result within a certain time.</description>
    </item>
    
    <item>
      <title>Check_MK Forwarder</title>
      <link>https://sakuli.io/docs/200_enterprise/check_mk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/200_enterprise/check_mk/</guid>
      <description>Add the forwarder to your project with:
SAKULI_LICENSE_KEY=&amp;lt;PERSONAL_NPM_ACCESS_TOKEN&amp;gt; npm i @sakuli/forwarder-check_mk To register the forwarder in your project you have edit the package.json file and add the preset to the sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-check_mk&amp;#34; ] } } Sakuli Client Configuration It is assumed that the client is already monitored by Check_MK and a agent is installed and running on it.
Spool folder Create a new folder spool in the installation path of the Check_MK agent.</description>
    </item>
    
    <item>
      <title>OMD / Gearman Forwarder</title>
      <link>https://sakuli.io/docs/200_enterprise/omd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/200_enterprise/omd/</guid>
      <description>Add the forwarder to your project with:
SAKULI_LICENSE_KEY=&amp;lt;PERSONAL_NPM_ACCESS_TOKEN&amp;gt; npm i @sakuli/forwarder-gearman To register the forwarder in your project you have edit the package.json file and add the preset to the sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-gearman&amp;#34; ] } } Configure OMD Sakuli transmits performance data to a Gearman result queue rather than to OMD directly. So a gearman-enabled monitoring system in a OMD environment is required.</description>
    </item>
    
  </channel>
</rss>