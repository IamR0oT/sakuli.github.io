<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writing Tests on Sakuli E2E and Monitoring</title>
    <link>/docs/writing-tests/</link>
    <description>Recent content in Writing Tests on Sakuli E2E and Monitoring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/writing-tests/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Anatomy of a Project</title>
      <link>/docs/writing-tests/000_anatomy-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/writing-tests/000_anatomy-project/</guid>
      <description>This guide assumes, that you have finished the &amp;ldquo;Getting started&amp;rdquo; guide or that you are experienced with Sakuli v1.
 Most of the complexity and conventions come due to the backwards compatibility to V1 which requires such a folder and file layout for various reasons (the biggest is Sahi). Sakuli now offers various ways to reduce this complexity dramatically. These features will eventually come in upcoming releases.
 Setup and configuration The minimum setup of a Sakuli project looks like this:</description>
    </item>
    
    <item>
      <title>Interacting with the environment</title>
      <link>/docs/writing-tests/100_native-testing/110_interacting-with-env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/writing-tests/100_native-testing/110_interacting-with-env/</guid>
      <description>In addition to screenshot-based test-actions, Sakuli is able to utilize your keyboard, clipboard and environment variables. All these features are incorporated in the Environment class.
Keyboard actions The following snippet shows a possible use-case for native keyboard actions. When initiating the download in Firefox, a native file download dialog opens. To start the download, we need to accept the file dialog, which is not possible with the capabilities of Selenium.</description>
    </item>
    
    <item>
      <title>Screenshot based Testing</title>
      <link>/docs/writing-tests/100_native-testing/100_screenshot-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/writing-tests/100_native-testing/100_screenshot-based/</guid>
      <description>A lot of end-to-end scenarios exceed the capabilities of browsers and webdrivers. This might include common use-cases like a drag and drop from the host system to a webpage or exporting a report into a spreadsheet or pdf-format. In these cases, your web-based tests can be extended to also validate behaviour and invoke interactions outside the browser, all within a single test.
Of course, you can also use Sakuliâ€™s native testing power on its own, e.</description>
    </item>
    
  </channel>
</rss>