<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sakuli E2E Testing and Monitoring</title>
    <link>https://sakuli.io/</link>
    <description>Recent content on Sakuli E2E Testing and Monitoring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://sakuli.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Icinga2 Forwarder</title>
      <link>https://sakuli.io/docs/enterprise/icinga2-forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/enterprise/icinga2-forwarder/</guid>
      <description>Add the forwarder to your project with:
npm i @sakuli/forwarder-icinga2 To register the forwarder in your project you have edit the package.json file and add the preset to the Sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-icinga2&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of the license information. You find further information in the enterpise section  Enable the Icinga2 API The steps to enable the Icinga2 API are described in the REST API documentation.</description>
    </item>
    
    <item>
      <title>Check_MK Forwarder</title>
      <link>https://sakuli.io/docs/enterprise/check_mk-forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/enterprise/check_mk-forwarder/</guid>
      <description>Add the forwarder to your project with:
npm i @sakuli/forwarder-checkmk To register the forwarder in your project you have to edit the package.json file and add the preset to the sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-checkmk&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of the license information. You find further information in the enterpise section  Sakuli Client Configuration It is assumed that the client is already monitored by Check_MK and that an agent is installed and running on it.</description>
    </item>
    
    <item>
      <title>OMD / Gearman Forwarder</title>
      <link>https://sakuli.io/docs/enterprise/omd-forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/enterprise/omd-forwarder/</guid>
      <description>Install the forwarder to your project with:
npm i @sakuli/forwarder-gearman To register the forwarder in your project you have edit the package.json file and add the preset to the Sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-gearman&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of the license information. You find further information in the enterpise section  Configure OMD Sakuli transmits performance data to a Gearman result queue rather than to OMD directly.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://sakuli.io/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/getting-started/</guid>
      <description>Prerequisites Sakuli is built and tested against the current LTS version of Node.js. In order to run Sakuli on your system, we will assume that you have a node v10.15.3 (lts/dubnium) installed on your system.
To install Node.js on your system, you can either go to the node website, or you can use tools like node version manager, a utility to manage various node versions on a per-user basis. In general, a per-user installation is the preferred way since it runs in an unprivileged mode.</description>
    </item>
    
    <item>
      <title>Anatomy of a Project</title>
      <link>https://sakuli.io/docs/100_writing-tests/000_anatomy-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/100_writing-tests/000_anatomy-project/</guid>
      <description>This guide assumes, that you have finished the &amp;ldquo;Getting started&amp;rdquo; guide or that you are experienced with Sakuli v1.
 Most of the complexity and conventions come due to the backwards compatibility to V1 which requires such a folder and file layout for various reasons (the biggest is Sahi). Sakuli now offers various ways to reduce this complexity dramatically. These features will eventually come in upcoming releases.
 Setup and configuration The minimum setup of a Sakuli project looks like this:</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://sakuli.io/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/features/</guid>
      <description>Core Features (Open Source) Testing based on Selenium and Nut.js     Screenshot based interaction    DOM based interaction    Screen Sizes     Drag and Drop    Native Control    Clipboard integration    Secrets     Simplifying Selenium    Node debugging    No more Staleelements     Supported OS (others may also work but without warranty)   Windows Windows 10 and above     Mac OS OSX V.</description>
    </item>
    
    <item>
      <title>Interacting with the environment</title>
      <link>https://sakuli.io/docs/100_writing-tests/100_native-testing/110_interacting-with-env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/100_writing-tests/100_native-testing/110_interacting-with-env/</guid>
      <description>In addition to screenshot-based test-actions, Sakuli is able to utilize your keyboard, clipboard and environment variables. All these features are incorporated in the Environment class.
Keyboard actions The following snippet shows a possible use-case for native keyboard actions. When initiating the download in Firefox, a native file download dialog opens. To start the download, we need to accept the file dialog, which is not possible with the capabilities of Selenium.</description>
    </item>
    
    <item>
      <title>Legal Notice</title>
      <link>https://sakuli.io/legalnotice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/legalnotice/</guid>
      <description>Address ConSol Consulting &amp;amp; Solutions Software GmbH
St.-Cajetan-Straße 43
D-81669 Munich
Telefon: +49-89-45841-100
Telefax: +49-89-45841-111
E-Mail: info@consol.de
Commercial register Registration court: Munich District Court
HRB 97371
Sales tax identification number (in accordance with § 27 a of the Sales Tax Law) DE 129318612
Authorized company officers Dr. Ulrich Schwanengel
Michael Beutner – Technology
Andrea Stellwag – Finances
Bernd Wiserner – Resources
Responsible for content (in accordance with § 6 MDStV) Nico Zellner</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>https://sakuli.io/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/monitoring/</guid>
      <description>Aside from the correct behavior of your system, you may also be interested in the actual performance of user interactions with the system.
First to Know, First to Act Identifying possible performance bottlenecks - before your users will - is a critical task for operators and administrators. Sakuli makes it possible to integrate such real-world performance analysis in an automated way. To achieve this, Sakuli provides a generic API.</description>
    </item>
    
    <item>
      <title>Monitoring Forwarder</title>
      <link>https://sakuli.io/enterprise/forwarder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/enterprise/forwarder/</guid>
      <description>End-2-End Application Testing and Monitoring: Your Perfect Combination Combining end-2-end testing with monitoring solutions proves to be optimal – because effective quality assurance looks over and beyond any given server: Automated end-2-end tests ensure that your web or rich client ecosystem will keep its promise. Ultimately though, the quality of your systems will be assessed by the users.
Monitor Critical Workflows Imagine testing your critical processes and workflows by simulating a real-world user, sending execution times, warnings and error messages (including screenshots of the system under test) to the monitoring system of your choice.</description>
    </item>
    
    <item>
      <title>Pre-Configured Headless Container</title>
      <link>https://sakuli.io/enterprise/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/enterprise/container/</guid>
      <description>Sakuli Container in a Nutshell Our pre-configured Docker container will run Sakuli in an isolated environment. This will ensure having the same setup and equal conditions for every test-run. You don´t need an unlocked display for native UI interaction with the headless VNC image configured in every container. For debugging purposes, you will be able to watch your test execution live in a browser or a VNC client any time.</description>
    </item>
    
    <item>
      <title>RPA - Robot Process Automation</title>
      <link>https://sakuli.io/rpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/rpa/</guid>
      <description>Over the years systems and processes are growing, eventually heading for potential technology and media breakdowns. In such scenarios, automation of processes and daily tasks may become quite difficult. Sakuli can help to automate tasks between various system boundaries. Downloading a report from a browser-based reporting tool app and upload it to shared folder won’t create problems anymore: Sakuli closes the gap between browser automation and desktop automation.
Have Sakuli do the Work Add import or export functionalities to your application when APIs are missing or too expensive to implement.</description>
    </item>
    
    <item>
      <title>Sakuli CLI Tools</title>
      <link>https://sakuli.io/enterprise/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/enterprise/cli/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sakuli Core</title>
      <link>https://sakuli.io/enterprise/core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/enterprise/core/</guid>
      <description>All You Need UI Test Automation Sakuli combines web testing with testing on native applications. That’s all you need in order to perfectly simulate a real-world user. Design your tests, have them run automatically and save a ton of time by dramatically reducing your manual testing.
Build Sustainable Tests Sakuli uses state of the art web-testing technologies like Selenium, wraps a lot of standard functionality and use-cases into user-friendly packages, thereby solving most of the pain points encountered by test designers in the past.</description>
    </item>
    
    <item>
      <title>Sakuli Hub</title>
      <link>https://sakuli.io/enterprise/hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/enterprise/hub/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Screenshot based Testing</title>
      <link>https://sakuli.io/docs/100_writing-tests/100_native-testing/100_screenshot-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/docs/100_writing-tests/100_native-testing/100_screenshot-based/</guid>
      <description>A lot of end-to-end scenarios exceed the capabilities of browsers and webdrivers. This might include common use-cases like a drag and drop from the host system to a webpage or exporting a report into a spreadsheet or pdf-format. In these cases, your web-based tests can be extended to also validate behaviour and invoke interactions outside the browser, all within a single test.
Of course, you can also use Sakuli’s native testing power on its own, e.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://sakuli.io/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sakuli.io/testing/</guid>
      <description>Sakuli makes it easy to write tests that act like real-world users. It automatically sets up and starts a webdriver instance and also lets you take control over the systems’s mouse and keyboard. The example below shows a basic login to an imaginary webbased service with login form: (async () =&amp;gt; { const testCase = new TestCase(); try { await _navigateTo(&amp;#34;example.com&amp;#34;); await _setValue(_input(&amp;#39;user&amp;#39;), &amp;#39;me&amp;#39;); await _setValue(_password_(&amp;#39;password&amp;#39;), &amp;#39;top-$ecret&amp;#39;); await _click(_button(&amp;#39;Login&amp;#39;)); testCase.</description>
    </item>
    
  </channel>
</rss>